---
- hosts: all

  vars_files:
    - "vaults/{{ env }}-vault.yml"

  vars:

  module_defaults:
    vmware.vmware_rest.content_locallibrary_info:
      vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
      vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
      vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
      vcenter_validate_certs: false

    vmware.vmware_rest.vcenter_vm_info:
      vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
      vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
      vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
      vcenter_validate_certs: false

    vmware.vmware_rest.vcenter_vm_hardware_cpu:
      vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
      vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
      vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
      vcenter_validate_certs: false

  pre_tasks:

    - name: wait for vm to become reachable
      ansible.builtin.wait_for_connection:
        timeout: 900

    - name: check connectivity to "{{ ansible_play_hosts }}"
      ping:

    - name: Set platform/version specific variables
      include_vars: "{{ __vars_file }}"
      loop:
        - "{{ ansible_facts['os_family'] }}.yml"
        - "{{ ansible_facts['distribution'] }}.yml"
        - >-
          {{ ansible_facts['distribution'] ~ '_' ~
          ansible_facts['distribution_major_version'] }}.yml
        - >-
          {{ ansible_facts['distribution'] ~ '_' ~
          ansible_facts['distribution_version'] }}.yml
      vars:
        __vars_file: "vars/{{ item }}"
      when: __vars_file is file

  tasks:
    - debug: var=hostvars[inventory_hostname]['ansible_default_ipv4']['address']

    - name: set connection info
      ansible.builtin.set_fact:
        connection_args:
            vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
            vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
            vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
      tags: always

    - name: list all local content library
      vmware.vmware_rest.content_locallibrary_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
      register: all_content_libraries
      delegate_to: localhost

    - name: Look up the VM called test_vm1 in the inventory
      vmware.vmware_rest.vcenter_vm_info:
        filter_names:
        - "{{ inventory_hostname }}"
      register: search_result
      delegate_to: localhost
    
    - name: Collect information about a specific VM
      vmware.vmware_rest.vcenter_vm_info:
        vm: '{{ search_result.value[0].vm }}'
      register: test_vm1_info
      delegate_to: localhost
    
    - name: Dedicate one core to the VM
      vmware.vmware_rest.vcenter_vm_hardware_cpu:
        vm: '{{ test_vm1_info.id }}'
        hot_add_enabled: true
      register: _result
      delegate_to: localhost

    - debug: var=_result

    - reboot:
      become: true

    - name: add host to hostgroup
      redhat.satellite.host:
        username: "{{ satellite_username }}"
        password: "{{ satellite_password }}"
        server_url: "{{ satellite_server_url }}"
        location: "{{ satellite_location }}"
        organization: "{{ satellite_organization }}"
        validate_certs: no
        hostgroup: "{{ rhc_auth.hostgroup }}"
        name: "{{ inventory_hostname }}"
        build: false
      delegate_to: localhost
      become: no
