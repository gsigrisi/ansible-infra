---
- name: dns A record update
  hosts: "{{ targeted_host| default('all') }}"
  serial: true 
  ignore_unreachable: true
  gather_facts: no

  vars_files:
    - "{{ playbook_dir }}/../../vaults/{{ env }}-vault.yml"
    - "{{ playbook_dir }}/../../vars/ddns.yml"

  vars:
    dns_list: []
    ip_real: []

  pre_tasks:
    - name: pre_tasks
      block:
        - name: determine hosts that are up
          wait_for_connection:
            timeout: 2
          #vars:
          #  ansible_connection: "{{ hostvars[inventory_hostname].ansible_connection }}| default('ssh')"
        - name: add devices with connectivity to the "running_hosts" group
          group_by:
            key: "running_hosts"
      rescue:
        - debug: msg="cannot connect to {{ inventory_hostname }}"


- name: update cloudflare entries
  hosts: running_hosts
  serial: true 
  gather_facts: yes

  vars_files:
    - "{{ playbook_dir }}/../../vaults/{{ env }}-vault.yml"
    - "{{ playbook_dir }}/../../vars/ddns.yml"

  vars:
    dns_list: []
    ip_real: []

  tasks:
    - name: get updates
      block:
        #  - name: show data
        #    debug: 
        #      msg: "update {{ item.0.dns_name }} via{{':'}} {{ item.1.name }}" 
        #    with_subelements:
        #      - "{{ ddns | selectattr('target', 'defined') | list }}"
        #      - target
        #    when:
        #      - item.0.dns_name in item.1.name
        #      - inventory_hostname ~ item.1.name
        #    run_once: True

        - name: get public ip
          community.general.ipify_facts:

        - name: show public ip
          debug: 
            msg: "{{ inventory_hostname }} has public ip pointing to {{ hostvars[inventory_hostname]['ipify_public_ip']}}"
          
        - name: get existing A record
          set_fact:
            dns_list: "{{ dns_list +
                         [{ 'dns_name': item.0.dns_name,
                            'domain': item.0.domain,
                            'ip_current': lookup('community.general.dig', item.0.dns_name ~ '.' ~ item.0.domain  , '@1.1.1.1'),
                            'ip_real': hostvars[inventory_hostname]['ipify_public_ip'],
                            'target': item.1.name }] }}"
          delegate_to: "{{ item.1.name }}"
          loop: "{{ ddns | subelements('target') }}"
          register: output
          run_once: True
          when:
            - item.0.dns_name in item.1.name
            - inventory_hostname in item.1.name

        - name: get dns_list per host
          debug: 
            msg: "{{ hostvars[inventory_hostname]['dns_list']}}"

        - name: show dns_list fact
          debug: 
            msg: "updating {{ item.dns_name }} with ip{{':'}} {{ item.ip_current }} to {{ item.ip_real }} via {{ item.target }}"
          loop: "{{ dns_list| flatten(levels=1) }}"
          delegate_to: "{{ item.target }}"
          when:
            - inventory_hostname in item.target
            - item.ip_current != item.ip_real 
          run_once: True

      when: 
        - inventory_hostname in groups["ddns"]

    - name: update public ipv4 ddns
      block:
        - name: update DNS A record
          community.general.cloudflare_dns:
            zone: "{{ cloudflare_zone }}"
            record: "{{ item.dns_name }}"
            type: A
            value: "{{ item.ip_real }}"
            api_token: "{{ cloudflare_api_token }}"
            solo: true
            state: present
          register: record
          delegate_to: localhost
          loop: "{{ dns_list| flatten(levels=1) }}"
      when: 
        - inventory_hostname in item.target
        - inventory_hostname in groups["ddns"]
        - item.ip_current != item.ip_real 
        
    - name: show dns record created
      debug: var=record
      when: 
        - record.changed | bool 
