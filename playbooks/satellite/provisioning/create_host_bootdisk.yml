---
- name: create vmware host with bootdisk
  hosts: "{{ targeted_host| default('localhost') }}"
  gather_facts: no

  vars:
    notify_via_telegram: true
    os_major: "{{ os_major | default('9') }}"
    env: "{{ env | default('env') }}"

  pre_tasks:
    - name: set platform/version/env specific variables
      include_vars: "{{ item }}"
      loop:
        - "{{ playbook_dir }}/../../../vars/RedHat_{{ os_major | default('9') }}.yml"
        - "{{ playbook_dir }}/../../../vars/satellite-{{ hostvars[inventory_hostname].env | default('mgmt')}}.yml"
      when: item is file

    - name: set login/env specific variables
      include_vars: "{{ __vars_file }}"
      loop:
        - "satellite-{{ hostvars[inventory_hostname].env }}.yml"
      vars:
        __vars_file: "{{ playbook_dir }}/../../../vaults/{{ hostvars[inventory_hostname].env }}-vault.yml"
      when: __vars_file is file

    - name: show info
      ansible.builtin.debug:
        msg: |-
          Hostgroup: "{{ hg_name_full }}",
          Network: "{{ net }}",
          Ptable: "{{ ptable }}",
          OS: "{{ os }}",
          Kickstart_repository: "{{ ks }}",
          Content_view: "{{ cv }}",
          Content_source: "{{ capsule_server }}"

    - pause:

  tasks:

    - name: create host(s)
      block:
        - name: create host(s) in vSphere
          redhat.satellite.host:
            username: "{{ satellite_username | default(omit) }}"
            password: "{{ satellite_password | default(omit) }}"
            server_url: "{{ satellite_server_url | default(omit) }}"
            location: "{{ satellite_location }}"
            organization: "{{ satellite_organization }}"
            validate_certs: "{{ satellite_validate_certs | default(omit) }}"
            name: "{{ vm_name | default(lookup('community.general.random_pet'), true) ~ (vm_name is defined and num_instances | int > 1 )|ternary('-' + item, '') ~ '.' ~ domain_name }}"
            state: present
            build: true
            hostgroup: "{{ hg_name_full }}"
            compute_resource: "VMware"
            compute_profile: "{{ compute_profile | default('2-Medium Generic') }}"
            compute_attributes:
              start: "1"
            ptable: "{{ ptable }}"
            provision_method: bootdisk
            operatingsystem: "{{ os }}"
            kickstart_repository: "{{ ks }}"
            subnet: "APPS"
            content_source: "{{ capsule_server }}"
            content_view: "{{ cv }}"
            lifecycle_environment: "LAB"
          register: output
          with_sequence: start=1 end="{{ num_instances|default(1) }}"

        - name: set vms list
          set_fact:
            vms: "{{ output | community.general.json_query('results[*].entity.hosts[*].name') | flatten }} "

        - name: print new host(s) fqdn
          debug:
            msg: "{{ item }}"
          loop:  "{{ vms }}"

        - name: Move vm to corresponding folder
          community.vmware.vmware_guest_move:
            hostname: "{{ vcenter_hostname }}"
            username: "{{ vcenter_username }}"
            password: "{{ vcenter_password }}"
            datacenter: DC1
            name: "{{ item }}"
            dest_folder: "/DC1/vm/KNA/RHEL{{ os_major }}"
            validate_certs: false
          loop: "{{ vms }}"
          delegate_to: localhost

        - name: "notify via telegram"
          telegram:
            token: "{{ pinguobot_token }}"
            api_args:
              chat_id: "{{ pinguobot_chatid }}"
              text: "{{ msg }}"
              parse_mode: "markdown"
              disable_web_page_preview: true
              disable_notification: false
          when: notify_via_telegram | bool
          vars:
            msg: "New RHEL{{ os_major }} VM: {{ output | community.general.json_query('results[*].entity.hosts[*].name') | join('')}} deployed on VMware"
