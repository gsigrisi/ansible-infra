---
- hosts: "{{ targeted_host| default('localhost') }}"
  gather_facts: no

  vars_files:
    - "{{ playbook_dir }}/../../../vaults/{{ env }}-vault.yml"
    - "{{ playbook_dir }}/../../../vars/satellite-vars.yml"

  pre_tasks:
  #  - name: get satellite_products list
  #    set_fact:
  #      list_products: "{{ list_products | default([]) + [item.name] | unique }}"
  #    loop: "{{ satellite_products | selectattr('name', 'defined') | list }}"
  #

  roles:
    - role: redhat.satellite.repositories

  post_tasks:
    - name: "Sync Red Hat repository"
      when: sync_repos | bool
      block:
        - name: sync repositories
          redhat.satellite.repository_sync:
            product: "{{ item }}"
            server_url: "{{ satellite_server_url }}"
            username: "{{ satellite_username }}"
            password: "{{ satellite_password }}"
            organization: "{{ satellite_organization }}"
            validate_certs: false
          loop: "{{ satellite_products | map(attribute='name') | list }}"
          async: "{{ satellite_timeout }}"
          changed_when: false  # async always returns changed, check in async_status instead
          poll: 0
          register: async_results

        - name: check async status for sync repository
          ansible.builtin.async_status:
            jid: "{{ item.ansible_job_id }}"
          register: async_poll_results
          until: async_poll_results.finished
          changed_when: async_poll_results.rc is defined and async_poll_results.rc == 2
          failed_when:
            - (not async_poll_results.finished) or (async_poll_results.rc is defined and async_poll_results.rc not in [0, 2])
          retries: "{{ (( satellite_timeout | int) / 5) | round | int }}"
          delay: 5
          when:
            - not ansible_check_mode
          with_items: "{{ async_results| community.general.json_query('results[*]')}}"

        - name: clean up async file
          ansible.builtin.async_status:
            jid: '{{ item.ansible_job_id }}'
            mode: cleanup
          with_items: "{{ async_results| community.general.json_query('results[*]')}}"
