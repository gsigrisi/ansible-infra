---
- name: Configure 3rdparty products
  hosts: "{{ targeted_host| default('localhost') }}"
  gather_facts: false

  pre_tasks:
    - name: Create Content Crendentials
      redhat.satellite.content_credential:
        username: "{{ satellite_username | default(omit) }}"
        password: "{{ satellite_password | default(omit) }}"
        server_url: "{{ satellite_server_url | default(omit) }}"
        validate_certs: "{{ satellite_validate_certs | default(omit) }}"
        organization: "{{ satellite_organization }}"
        name: "{{ item.name }}"
        content_type: "{{ item.content_type }}"
        content: "{{ item.content }}"
      loop: "{{ satellite_content_credentials }}"

  tasks:
    - name: 3rd Party products
      redhat.satellite.product:
        username: "{{ satellite_username | default(omit) }}"
        password: "{{ satellite_password | default(omit) }}"
        server_url: "{{ satellite_server_url | default(omit) }}"
        organization: "{{ satellite_organization }}"
        validate_certs: "{{ satellite_validate_certs | default(omit) }}"
        name: "{{ item.name }}"
          #sync_plan: "{{ item.sync_plan | default(omit) }}"
        state: present
      loop: "{{ additional_products }}"
      tags: 3rd_party_products

    - name: "3rd Party repos"
      redhat.satellite.repository:
        username: "{{ satellite_username | default(omit) }}"
        password: "{{ satellite_password | default(omit) }}"
        server_url: "{{ satellite_server_url | default(omit) }}"
        organization: "{{ satellite_organization }}"
        validate_certs: "{{ satellite_validate_certs | default(omit) }}"
        name: "{{ item.name }}"
        content_type: "yum"
        url: "{{ item.url | default(omit) }}"
        http_proxy_policy: "{{ item.http_proxy_policy | default(omit) }}"
        http_proxy: "{{ item.http_proxy | default(omit) }}"
        gpg_key: "{{ item.gpg_key | default(omit) }}"
        product: "{{ item.product }}"
        mirror_on_sync: "{{ item.mirror_on_sync | default(false) }}"
        os_versions: "{{ item.os_version | default(omit) }}"
        unprotected: "{{ item.unprotected | default(omit) }}"
        download_policy: "{{ item.download_policy | default(omit) }}"
      loop: "{{ additional_repos }}"
      tags: 3rd_party_repos

    - name: "Sync 3rd party repository"
      when: sync_repos | bool
      block:
        - name: Sync 3rd repositories
          redhat.satellite.repository_sync:
            product: "{{ item }}"
            server_url: "{{ satellite_server_url }}"
            username: "{{ satellite_username }}"
            password: "{{ satellite_password }}"
            organization: "{{ satellite_organization }}"
            validate_certs: false
          loop: "{{ additional_products | map(attribute='name') | list }}"
          async: "{{ satellite_timeout }}"
          changed_when: false  # async always returns changed, check in async_status instead
          poll: 0
          register: async_results_3rd

        - name: Check async status for sync repository
          ansible.builtin.async_status:
            jid: "{{ item.ansible_job_id }}"
          register: async_poll_results
          until: async_poll_results.finished
          changed_when: async_poll_results.rc is defined and async_poll_results.rc == 2
          failed_when:
            - (not async_poll_results.finished) or (async_poll_results.rc is defined and async_poll_results.rc not in [0, 2])
          retries: "{{ ((satellite_timeout | int) / 5) | round | int }}"
          delay: 5
          when:
            - not ansible_check_mode
          with_items: "{{ async_results_3rd | community.general.json_query('results[*]')}}"

        - name: Clean up async file
          ansible.builtin.async_status:
            jid: '{{ item.ansible_job_id }}'
            mode: cleanup
          with_items: "{{ async_results_3rd | community.general.json_query('results[*]')}}"


        #    - name: enable sync for products
        #      redhat.satellite.repository_sync:
        #        username: "{{ satellite_username | default(omit) }}"
        #        password: "{{ satellite_password | default(omit) }}"
        #        server_url: "{{ satellite_server_url | default(omit) }}"
        #        validate_certs: "{{ satellite_validate_certs | default(omit) }}"
        #        organization: "{{ satellite_organization }}"
        #        repository: "{{ item.name }}"
        #        product: "{{ item.product }}"
        #      loop: "{{ additional_repos }}"
        #      when: sync_repos
