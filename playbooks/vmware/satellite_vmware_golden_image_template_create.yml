---
- name: create golden image vm template
  hosts: localhost
  gather_facts: no

  vars_files:
    - "{{ playbook_dir }}/../../vaults/{{ env }}-vault.yml"
    - "{{ playbook_dir }}/../../vars/parameters.yml"

  vars:

  tasks: 

    - name: set connection info
      ansible.builtin.set_fact:
        connection_args:
            vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
            vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
            vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"

    - name: create base vm
      vmware.vmware_rest.vcenter_vm:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        placement:
          cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', vcenter_cluster, **connection_args) }}"
          datastore: "{{ lookup('vmware.vmware_rest.datastore_moid', vcenter_datastore, **connection_args) }}"
          folder: "{{ lookup('vmware.vmware_rest.folder_moid', vcenter_folder, **connection_args) }}"
          resource_pool: "{{ lookup('vmware.vmware_rest.resource_pool_moid', vcenter_resource_pool, **connection_args) }}"
        name: "{{ os_major }}-builder-vm"
        guest_OS: "{% if os_major == 'rhel9' %}RHEL_9_64{% else %}RHEL_8_64{% endif %}"
          #guest_OS: RHEL_9_64
        hardware_version: VMX_19
        cpu:
          count: "{{ cpu_count | default(2) }}"
          cores_per_socket: "{{ cores_per_socket | default(1) }}"
          hot_add_enabled: no
          hot_remove_enabled: no
        memory:
          hot_add_enabled: no
          size_MiB: "{{ mem_size | default(1024) }}"
        disks:
          - type: SATA
            backing:
              type: VMDK_FILE
              vmdk_file: "[{{ vcenter_datastore_short}}] my_vmdk/{{ os_major }}-golden-converted.vmdk"
        cdroms:
          - type: SATA
            sata:
              bus: 0
              unit: 2
        nics:
          - backing:
              type: STANDARD_PORTGROUP
              network: "{{ lookup('vmware.vmware_rest.network_moid', vcenter_network, **connection_args) }}"
            start_connected: yes
      register: deploy_vm 

    - name: ensure vm is turned on
      vmware.vmware_rest.vcenter_vm_power:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        state: start
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', vcenter_folder ~ '/' ~ os_major ~ '-builder-vm' , **connection_args) }}"
    
    - name: wait until my vm is ready
      vmware.vmware_rest.vcenter_vm_tools_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        vm: '{{ deploy_vm.id }}'
      register: vm_tools_info
      until:
      - vm_tools_info is not failed
      - vm_tools_info.value.run_state == "RUNNING"
      retries: 10
      delay: 5

    - name: create a content library on local disk
      vmware.vmware_rest.content_locallibrary:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        name: local
        description: automated
        publish_info:
          published: true
          authentication_method: NONE
        storage_backings:
        - datastore_id: "{{ lookup('vmware.vmware_rest.datastore_moid', vcenter_datastore , **connection_args) }}"
          type: DATASTORE
        state: present
      register: local_lib

    - name: List all Local Content Library
      vmware.vmware_rest.content_locallibrary_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
      register: all_content_libraries

    - name: Use the name to identify the right Content Library
      set_fact:
        local_lib: "{{ all_content_libraries.value | selectattr('name', 'equalto', 'local')|first }}"

    - name: Get the list of items of the Local library
      vmware.vmware_rest.content_library_item_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        library_id: '{{ local_lib.id }}'
      register: lib_items

    - name: Create a VM template on the library
      vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        name: "{{ os_major }}-template"
        library: "{{ local_lib.id }}"
        source_vm: "{{ deploy_vm.id }}"
        placement:
          cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', vcenter_cluster, **connection_args) }}"
          folder: "{{ lookup('vmware.vmware_rest.folder_moid', vcenter_folder, **connection_args) }}"
          resource_pool: "{{ lookup('vmware.vmware_rest.resource_pool_moid', vcenter_resource_pool, **connection_args) }}"

    - name: "lookup MoID of {{ os_major }}-builder vm" 
      #ansible.builtin.debug: msg="{{ os_major }}-builder-vm_id = {{ lookup('vmware.vmware_rest.vm_moid', '/DC1/vm/{{ os_major }}-builder-vm', **connection_args) }}"
      #ansible.builtin.debug: msg="{{ os_major }}-builder-vm id {{ lookup('vmware.vmware_rest.vm_moid', 'vcenter_folder/{{ os_major }}-builder-vm', **connection_args) }}"
      ansible.builtin.debug: 
        msg="{{ lookup('vmware.vmware_rest.vm_moid', 'DC1/vm/{{ os_major }}-builder-vm', **connection_args) }}"

    - name: "ensure {{ os_major }}-builder vm is turned off" 
      vmware.vmware_rest.vcenter_vm_power:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', vcenter_folder ~ '/' ~ os_major ~ '-builder-vm' , **connection_args) }}"
        state: stop
