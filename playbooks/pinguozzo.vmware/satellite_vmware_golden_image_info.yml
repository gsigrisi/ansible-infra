---
- name: get info about esx
  hosts: "{{ targeted_host| default('localhost') }}"
  gather_facts: no

  vars_files:
    - "{{ playbook_dir }}/../../vaults/{{ env }}-vault.yml"

  vars: 

  tasks:
    - name: set connection info
      ansible.builtin.set_fact:
        connection_args:
            vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
            vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
            vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"

        #    - name: lookup MoID of the object inside the path
        #      ansible.builtin.debug: msg="{{ lookup('vmware.vmware_rest.vm_moid', '/DC1/vm/', **connection_args) }}"

        #    - name: Check if goldenimage VM exists
        #      vmware.vmware_rest.vcenter_vm_info:
        #        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        #        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        #        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        #        vcenter_validate_certs: false
        #        filter_names:
        #        - "{{ golden_image_fqdn }}"
        #      register: search_result
        #
        #    - debug: var=search_result

    - name: collect a list of the datacenters
      vmware.vmware_rest.vcenter_datacenter_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
      register: my_datacenters
    
    - debug: var=my_datacenters
    
    - name: Build a list of all the datastores
      vmware.vmware_rest.vcenter_datastore_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
      register: all_the_datastores
    
    - debug: var=all_the_datastores
    
    - name: Build a list of all the clusters
      vmware.vmware_rest.vcenter_cluster_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
      register: all_the_clusters
    
    - debug: var=all_the_clusters
    
    - name: Retrieve details about the first cluster
      vmware.vmware_rest.vcenter_cluster_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        cluster: '{{ all_the_clusters.value[0].cluster }}'
      register: my_cluster_info
    
    - debug: var=my_cluster_info

    - name: Build a list of all the folders with the type VIRTUAL_MACHINE and called vm
      vmware.vmware_rest.vcenter_folder_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
      register: my_folders

    - debug: var=my_folders

    - name: Get network information
      vmware.vmware_rest.vcenter_network_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
      register: my_networking

    - debug: var=my_networking

    - name: List all Local Content Library
      vmware.vmware_rest.content_locallibrary_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
      register: all_content_libraries

    - debug: var=all_content_libraries
        
    - name: List all Local Content Library
      vmware.vmware_rest.content_locallibrary_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
      register: all_content_libraries
    
    - name: Use the name to identify the right Content Library
      set_fact:
        local_lib: "{{ all_content_libraries.value | selectattr('name', 'equalto', 'local')|first }}"

          #    - name: Get the list of items of the NFS library
          #      vmware.vmware_rest.content_library_item_info:
          #        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
          #        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
          #        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
          #        vcenter_validate_certs: false
          #        library_id: '{{ local_lib.id }}'
          #      register: lib_items

          #    - name: Define a new fact with the golden image ID
          #      ansible.builtin.set_fact:
          #        golden_image_rhel8_id: '{{ (lib_items.value|selectattr("name", "equalto", "golden_image_rhel8")|first).id }}'
          #
          #    - debug: var=golden_image_rhel8_id
