---
- name: create vm from template
  hosts: localhost
  gather_facts: no

  vars_files:
    - "{{ playbook_dir }}/../../vaults/{{ env }}-vault.yml"
    - "{{ playbook_dir }}/../../vars/parameters.yml"

  vars:
    ip_mode: "{{ ( ip_mode == 'dhcp') | ternary('dhcp', 'static') }}"

  tasks: 

    - name: set connection info
      ansible.builtin.set_fact:
        connection_args:
            vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
            vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
            vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
      tags: always

    - name: list all local content library
      vmware.vmware_rest.content_locallibrary_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
      register: all_content_libraries
    
    - name: use the name to identify the right content library
      set_fact:
        local_lib: "{{ all_content_libraries.value | selectattr('name', 'equalto', 'local')|first }}"
    
    - name: get the list of items of the local library
      vmware.vmware_rest.content_library_item_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        library_id: '{{ local_lib.id }}'
      register: lib_items

    - name: use the name to identify the item
      set_fact:
        my_template_item: "{{ lib_items.value | selectattr('name', 'equalto', ( os_major ) + '-template')|first }}"

    - name: set vm_name
      set_fact:
        vm_name: "{{ static_name | default(lookup('community.general.random_pet'), true) }}"

    - name: "deploy a new vm with {{ os_major }} based on the template"
      vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        name: "{{ vm_name ~ '.' ~ infra.domain }}"
        library: "{{ local_lib.id }}"
        template_library_item: "{{ my_template_item.id }}"
        placement:
          cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/DC1/host/KNA', **connection_args) }}"
          folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/DC1/vm', **connection_args) }}"
          resource_pool: "{{ lookup('vmware.vmware_rest.resource_pool_moid', '/DC1/host/KNA/Resources', **connection_args) }}"
        hardware_customization:
          cpu_update: 
            num_cpus: "{{ cpu_count | default(2) }}"
            num_cores_per_socket: "{{ cores_per_socket | default(1) }}"
          memory_update:
            memory: "{{ mem_size | default(1024) }}"
        state: deploy
      register: vmware_vm
      # with_sequence: start=1 end="{{ num_instances| default('1', true) }}"

    - name: "report the vm"
      debug:
        var: vmware_vm

    - name: "get the vm"
      vmware.vmware_rest.vcenter_vm_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        names: "{{ vm_name ~ '.' ~ infra.domain }}"
      register: vmware_vm

    - name: "customize the vm {{ vmware_vm.value[0].name }}"
      vmware.vmware_rest.vcenter_vm_guest_customization:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        vm: '{{ vmware_vm.value[0].vm }}'
        configuration_spec:
          linux_config:
            domain: "{{ infra.domain }}"
            hostname:
              fixed_name: '{{ vm_name }}'
              type: FIXED
        interfaces:
        - adapter:
            ipv4:
              type: DHCP
        global_DNS_settings:
          dns_suffix_list: []
          dns_servers: []
      register: customization_result
      when: ip_mode == "dhcp"

    - name: "customize the vm {{ vmware_vm.value[0].name }} with static_ip"
      vmware.vmware_rest.vcenter_vm_guest_customization:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        vm: '{{ vmware_vm.value[0].vm }}'
        configuration_spec:
          linux_config:
            domain: "{{ infra.domain }}"
            hostname:
              fixed_name: '{{ vm_name }}'
              type: FIXED
        interfaces: "{{ vm_data.interfaces }}"
        global_DNS_settings: "{{ infra.dns }}"
      register: customization_result
      when: ip_mode == "static"

    - name: collect information about a specific VM
      vmware.vmware_rest.vcenter_vm_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        vm: '{{ vmware_vm.value[0].vm }}'
      register: test_vm1_info
   
    - name: create a swap disk
      vmware.vmware_rest.vcenter_vm_hardware_disk:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        vm: '{{ vmware_vm.value[0].vm }}'
        type: SATA
        new_vmdk:
            capacity: "{{ swap_disk_size_in_bytes | default(10737418240) }}"
      when: add_swap | bool
      register: my_swap_disk

    - name: create a data disk
      vmware.vmware_rest.vcenter_vm_hardware_disk:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        vm: '{{ vmware_vm.value[0].vm }}'
        type: SATA
        new_vmdk:
          capacity: "{{ disk_size | default(32212254720) }}"
      when: add_data_disk | bool
      register: my_data_disk

    - name: set network interface
      community.vmware.vmware_guest_network:
        hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        datacenter: DC1
        validate_certs: false
        name: "{{ vm_name ~ '.' ~ infra.domain }}"
        state: present
        network_name: "{{ item.network_name | default(omit) }}"
        connected: "{{ item.connected | default(omit) }}"
      loop:
        - network_name: "{{ vm_network }}"
          connected: true

    - name: start the vm 
      vmware.vmware_rest.vcenter_vm_power:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        vm: '{{ vmware_vm.value[0].vm }}'
        state: start

    - name: wait until my vm is ready
      vmware.vmware_rest.vcenter_vm_tools_info:
        vcenter_hostname: "{{ lookup('ansible.builtin.vars', 'vcenter_hostname') }}"
        vcenter_username: "{{ lookup('ansible.builtin.vars', 'vcenter_username') }}"
        vcenter_password: "{{ lookup('ansible.builtin.vars', 'vcenter_password', default='') }}"
        vcenter_validate_certs: false
        vm: '{{ vmware_vm.value[0].vm }}'
      register: vm_tools_info
      until:
      - vm_tools_info is not failed
      - vm_tools_info.value.run_state == "RUNNING"
      retries: 10
      delay: 5
