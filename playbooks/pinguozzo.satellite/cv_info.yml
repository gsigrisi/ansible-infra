---
- hosts: "{{ targeted_host| default('localhost') }}"
  collections: redhat.satellite

  vars_files:
    - "{{ playbook_dir }}/../../vaults/{{ env }}-vault.yml"
  
  vars:
    cv_name: []

  pre_tasks:
    - name: check that required variables are defined
      ansible.builtin.assert:
        that:
          - cv_name is defined
        fail_msg: "cv_name must be defined"

  tasks:

    - name: List content views
      redhat.satellite.content_view_info:
        username: "{{ satellite_username }}"
        password: "{{ satellite_password }}"
        server_url: "{{ satellite_server_url }}"
        validate_certs: "{{ satellite_validate_certs }}"
        organization: "{{ satellite_organization }}"
          #name: "{{ cv_name }}"
      register: content_views
      no_log: True
    
    - pause:

    - name: Get Content View names (excluding composite)
      set_fact:
        ccv_name: "{{ ccv_name|default({}) | item.name  }}"
      loop: 
        - "{{ content_views.content_view }}"
      when: item.composite is not defined or item.composite is not true

    - pause:

    - name: with_items -> loop
      ansible.builtin.debug:
        msg: "{{ item }}"
      loop: 
        - "{{ ccv_name }}"

    - name: "Get content view info"
      redhat.satellite.content_view_info:
        username: "{{ satellite_username }}"
        password: "{{ satellite_password }}"
        server_url: "{{ satellite_server_url }}"
        validate_certs: "{{ satellite_validate_certs }}"
        organization: "{{ satellite_organization }}"
        name: "{{ item.name }}"
      loop: "{{ content_views.content_views }}"
      when: item.composite is not defined or item.composite is not true
      register: cv
      tags: never

    - pause:

    - name: "Output found repository sets"
      set_fact:
        repos: "{{ cv | community.general.json_query('content_view.repositories[*].name') }}"
        repos_label: "{{ cv | community.general.json_query('content_view.repositories[*].label') }}"


    - name: "Search for possible repository sets of a product"
      redhat.satellite.resource_info:
        username: "{{ satellite_username }}"
        password: "{{ satellite_password }}"
        server_url: "{{ satellite_server_url }}"
        validate_certs: "{{ satellite_validate_certs }}"
        organization: "{{ satellite_organization }}"
        resource: repositories
        search: "{{ item }}"
      loop: "{{ repos_label |flatten(levels=1) }}"
      register: data

    - set_fact:
        repo_product: "{{ repo_product|default({}) | combine ( {item.name : item.product.name } ) }}"
      with_items: "{{ data| community.general.json_query('results[*].resources[*]')}}" 
      no_log: True
   
    - pause: 

    - debug: var=repo_product

    - name: "Find repository set by name and product."
      redhat.satellite.repository_set_info:
        username: "{{ satellite_username }}"
        password: "{{ satellite_password }}"
        server_url: "{{ satellite_server_url }}"
        validate_certs: "{{ satellite_validate_certs }}"
        organization: "{{ satellite_organization }}"
        name: "{{ item }}"
      loop: "{{ repos |flatten(levels=1) }}"
      tags: never
